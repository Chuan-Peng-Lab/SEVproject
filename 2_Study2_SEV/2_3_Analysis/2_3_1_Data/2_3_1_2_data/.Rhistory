tmp2$word == i & tmp2$effective_useful == max(
tmp2$effective_useful[tmp2$word == i]
)
][1]
))
}
tmp3 <- rbind(tmp3, tmp3_amb, tmp3_low)
rm(tmp3_amb, tmp3_low, i)
#### 1.rank
for (i in seq(1, length(tmp3$word), 1)) {
max_indices <- which(tmp3$word == tmp3$word[i] & tmp3$effective_degree == max(tmp3$effective_degree[tmp3$word == tmp3$word[i]]))
if (length(max_indices) > 1) {
tmp3$max_dimension[i] <- "ambiguity"
} else {
tmp3$max_dimension[i] <- tmp3$belong_to[max_indices]
}
}
tmp4 <- tmp3 %>% dplyr::nest_by(
word
) %>% dplyr::mutate(
max_dimension = unique(data$max_dimension),
max_values = max(data$effective_degree)
) %>% dplyr::select(-data) %>% dplyr::arrange(
max_dimension, max_values
)
tmp3$word <- factor(tmp3$word, unique(tmp4$word))
tmp3$belong_to <- factor(tmp3$belong_to, levels = c(
"appearance", "socioEconomicStatus","socialAbility","ability", "morality",
"none","ambiguity"
))
#### 2.draw
showtext_auto()
belong_to_name <- c(
`appearance` = "Appearance",
`socioEconomicStatus` = "Socioeconomic status",
`socialAbility` = "Sociability",
`ability` = "Competence",
`morality` = "Morality",
`none` = "Non-five",
`ambiguity` = "Ambiguous"
)
tmp3 <- ungroup(tmp3) %>%
dplyr::filter(max_dimension %in% c("appearance", "socioEconomicStatus", "socialAbility", "ability", "morality"))
tmp3$max_dimension <- factor(
tmp3$max_dimension,
levels = c("appearance", "socioEconomicStatus","socialAbility","ability", "morality","none","ambiguity"),
labels = belong_to_name)
ggplot(data = tmp3, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff",
"#FF00FF","#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension") +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 30),
axis.text.y=element_text(angle = 0, colour = "black", size = 60),axis.title.x = element_text(size=120),
axis.title.y = element_text(size=120),
legend.title = element_text(size=120),legend.text = element_text(size=100),
strip.text = element_text(size = 120),legend.key.width=unit(3,'cm')) + facet_wrap(~ max_dimension, nrow = 5, scale = "free")
ggplot(data = tmp3, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff",
"#FF00FF","#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension") +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 30),
axis.text.y=element_text(angle = 0, colour = "black", size = 60),axis.title.x = element_text(size=120),
axis.title.y = element_text(size=120),
legend.title = element_text(size=120),legend.text = element_text(size=100),
strip.text = element_text(size = 120),legend.key.width=unit(3,'cm')) + facet_wrap(~ max_dimension, nrow = 5, scale = "free")
ggplot(data = tmp3, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff",
"#FF00FF","#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension") +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 30),
axis.text.y=element_text(angle = 0, colour = "black", size = 100),axis.title.x = element_text(size=120),
axis.title.y = element_text(size=120),
legend.title = element_text(size=120),legend.text = element_text(size=100),
strip.text = element_text(size = 100),legend.key.width=unit(3,'cm')) + facet_wrap(~ max_dimension, nrow = 5, scale = "free")
ggplot(data = tmp3, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff",
"#FF00FF","#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension") +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 30),
axis.text.y=element_text(angle = 0, colour = "black", size = 80),axis.title.x = element_text(size=120),
axis.title.y = element_text(size=120),
legend.title = element_text(size=120),legend.text = element_text(size=100),
strip.text = element_text(size = 100),legend.key.width=unit(3,'cm')) + facet_wrap(~ max_dimension, nrow = 5, scale = "free")
#### 3.partially enlarged (take the first 11 words of morality as example)
tmp4Mor <- tmp4 %>% dplyr::filter(
max_dimension == "morality"
) %>% dplyr::arrange(
desc(max_values)
)
tmp3Mor <- as.data.frame(tmp3) %>% dplyr::filter(
word %in% tmp4Mor$word[c(1:11)]
)
belong_to_name1 <- c('狼心狗肺' = "cruel and unscrupulous 狼心狗肺",
'无恶不作' = "commit all manners of crimes 无恶不作",
'善良' = "kind-hearted 善良",'伤风败俗'="immorality 伤风败俗",
'孝顺'="obedient 孝顺",'黑心'='black-hearted 黑心',
'大逆不道'="rebellious 大逆不道",
'忘恩负义'="ungrateful 忘恩负义",'丧尽天良'="unscrupulous 丧尽天良",
'不孝'="unfilial 不孝",'缺德'="unethical 缺德")
tmp3Mor$word<-factor(
tmp3Mor$word,
levels = c("狼心狗肺","无恶不作","善良","伤风败俗","孝顺","黑心",
"大逆不道", "忘恩负义","丧尽天良","不孝","缺德"),
labels = belong_to_name1
)
ggplot(data = tmp3Mor, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff", "#FF00FF", "#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension"
) +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 100),
axis.text.y=element_text(angle = 0, colour = "black", size = 100),axis.title.x = element_text(size=130,margin = margin(t=-500)),
axis.title.y = element_text(size=130),
legend.title = element_text(size=130),legend.text = element_text(size=100),
strip.text = element_text(size = 100),legend.key.width=unit(3,'cm'))+
facet_wrap(~ max_dimension, nrow = 5, scale = "free")
setwd('/Users/lilulu/Desktop/SEVproject/1_Study1_Verify dimensions/1_3_Analysis/1_3_1_data_bids[standardized_data]/1_3_1_2_data')
# read the file, using read.xlsx is better than read.csv
df <-  xlsx::read.xlsx(file='./Stage_1_word_collection_raw_en.xlsx'
, sheetIndex = 1, encoding="UTF-8")
## convert from wide to long
df <- df %>%
dplyr::mutate_all(.,as.character) %>%
tidyr::pivot_longer(cols = Moral_Pos_words:SES_Neg_NumChar,
names_to = c("Domain", "Valence","Stats"),
names_sep = "_",
#names_pattern = "(.*)_(.*)_(.*)",
values_to = "val") %>%
dplyr::mutate(word_indx = rep(1:(nrow(.)/3), each=3)) %>%
tidyr::pivot_wider(names_from = Stats, values_from = val) %>%
dplyr::filter(words!='我填过了就试试') # remove this nonsense
df_count <- df %>%
dplyr::group_by(words) %>%
dplyr::count() %>%
dplyr::arrange(., desc(n))
### -------------------------- Rating data of 71 words ----------------------------------
# load raw data
df_rating_71 <- xlsx::read.xlsx(file='./Stage_3_71_words_rating_processing_raw.xlsx'
, sheetIndex = 1) %>%
dplyr::select(Q2_R3:Q9_edu)
# add the expected domain of for each words
domain_w <- rep(c(rep("Morality", 14),
rep('Competence', 14),
rep('Sociability', 14),
rep('Appearance', 15),
rep('Wealth', 14)), 2)
wordList_71 <- xlsx::read.xlsx(file='./Stage_3_71_words_rating_processing_raw.xlsx'
, sheetIndex = 2, encoding="UTF-8") %>%
dplyr::select(words_id, words) %>%
dplyr::filter( !words_id %in% c('Q2_R38', 'Q3_R39','Q4_R38', 'Q5_R39')) %>%
dplyr::mutate(domain_w = domain_w)
df_rating_71_v <- df_rating_71 %>%
dplyr::filter(Q2_R38 == 10 & Q3_R39 == 4 & Q4_R38 == 5 & Q5_R39 == 13) %>%  # passed all attention check
dplyr::select(-one_of(c('Q2_R38', 'Q3_R39','Q4_R38', 'Q5_R39')))       # remove three attention check items.
# get the frequency for domain belongingness
recode_fun <- function(x, na.rm = FALSE) (x - 7)
recode_cond <- function(x) (ifelse(x > 9, TRUE, FALSE))
# re-code the all the results to the same scale
df_rating_71_domain <- df_rating_71_v %>%
dplyr::select(contains('Q2_') | contains('Q3_')) %>%
dplyr::mutate_at(colnames(.)
,function(x) ifelse(x > 9 , x-7, x))
# transpose the dataframe
col_subj_names <- paste("sub_", 1:nrow(df_rating_71_domain), sep = '')
row_word_id <- colnames(df_rating_71_domain)
df_rating_71_domain <- df_rating_71_domain %>%
dplyr::mutate(subj = col_subj_names) %>%
dplyr::select(subj,everything()) %>%
#dplyr::mutate_if(as.character) %>%
tidyr::gather(key = var_name, value = value, 2:ncol(.)) %>%
spread_(colnames(.)[1], "value") %>%
dplyr::rename(words_id = var_name) %>%
dplyr::select(words_id, all_of(col_subj_names))
df_rating_71_domain_frq <- df_rating_71_domain %>%
dplyr::mutate(N_moral = rowSums(.[col_subj_names] == 3),
N_compt = rowSums(.[col_subj_names] == 4),
N_soccm = rowSums(.[col_subj_names] == 5),
N_apprn = rowSums(.[col_subj_names] == 6),
N_soccl = rowSums(.[col_subj_names] == 7),
N_uncln = rowSums(.[col_subj_names] == 8)) %>%
select(words_id, N_moral:N_uncln) %>%
arrange(match(words_id, row_word_id)) %>%
dplyr::mutate(N_raters = rowSums( .[2:7] )) %>%
dplyr::mutate(Moral_freq = round(N_moral/N_raters,2),
Compt_freq = round(N_compt/N_raters,2),
SocCm_freq = round(N_soccm/N_raters,2),
Apprn_freq = round(N_apprn/N_raters,2),
SocCl_freq = round(N_soccl/N_raters,2),
Uncln_freq = round(N_uncln/N_raters,2))
df_rating_71_domain_frq_final <- df_rating_71_domain_frq %>%
dplyr::left_join(., wordList_71, by = 'words_id')
library(tidyverse)
library(rJava)
library(xlsx)
library(matrixStats)
df_rating_71_domain_frq <- df_rating_71_domain %>%
dplyr::mutate(N_moral = rowSums(.[col_subj_names] == 3),
N_compt = rowSums(.[col_subj_names] == 4),
N_soccm = rowSums(.[col_subj_names] == 5),
N_apprn = rowSums(.[col_subj_names] == 6),
N_soccl = rowSums(.[col_subj_names] == 7),
N_uncln = rowSums(.[col_subj_names] == 8)) %>%
select(words_id, N_moral:N_uncln) %>%
arrange(match(words_id, row_word_id)) %>%
dplyr::mutate(N_raters = rowSums( .[2:7] )) %>%
dplyr::mutate(Moral_freq = round(N_moral/N_raters,2),
Compt_freq = round(N_compt/N_raters,2),
SocCm_freq = round(N_soccm/N_raters,2),
Apprn_freq = round(N_apprn/N_raters,2),
SocCl_freq = round(N_soccl/N_raters,2),
Uncln_freq = round(N_uncln/N_raters,2))
View(df_rating_71_domain)
View(df_rating_71_domain)
### -------------------------- Rating data of 71 words ----------------------------------
# load raw data
df_rating_71 <- xlsx::read.xlsx(file='./Stage_3_71_words_rating_processing_raw.xlsx'
, sheetIndex = 1) %>%
dplyr::select(Q2_R3:Q9_edu)
# add the expected domain of for each words
domain_w <- rep(c(rep("Morality", 14),
rep('Competence', 14),
rep('Sociability', 14),
rep('Appearance', 15),
rep('Wealth', 14)), 2)
wordList_71 <- xlsx::read.xlsx(file='./Stage_3_71_words_rating_processing_raw.xlsx'
, sheetIndex = 2, encoding="UTF-8") %>%
dplyr::select(words_id, words) %>%
dplyr::filter( !words_id %in% c('Q2_R38', 'Q3_R39','Q4_R38', 'Q5_R39')) %>%
dplyr::mutate(domain_w = domain_w)
df_rating_71_v <- df_rating_71 %>%
dplyr::filter(Q2_R38 == 10 & Q3_R39 == 4 & Q4_R38 == 5 & Q5_R39 == 13) %>%  # passed all attention check
dplyr::select(-one_of(c('Q2_R38', 'Q3_R39','Q4_R38', 'Q5_R39')))       # remove three attention check items.
# get the frequency for domain belongingness
recode_fun <- function(x, na.rm = FALSE) (x - 7)
recode_cond <- function(x) (ifelse(x > 9, TRUE, FALSE))
# re-code the all the results to the same scale
df_rating_71_domain <- df_rating_71_v %>%
dplyr::select(contains('Q2_') | contains('Q3_')) %>%
dplyr::mutate_at(colnames(.)
,function(x) ifelse(x > 9 , x-7, x))
# transpose the dataframe
col_subj_names <- paste("sub_", 1:nrow(df_rating_71_domain), sep = '')
row_word_id <- colnames(df_rating_71_domain)
df_rating_71_domain <- df_rating_71_domain %>%
dplyr::mutate(subj = col_subj_names) %>%
dplyr::select(subj,everything()) %>%
#dplyr::mutate_if(as.character) %>%
tidyr::gather(key = var_name, value = value, 2:ncol(.)) %>%
spread_(colnames(.)[1], "value") %>%
dplyr::rename(words_id = var_name) %>%
dplyr::select(words_id, all_of(col_subj_names))
df_rating_71_domain_frq <- df_rating_71_domain %>%
dplyr::mutate(N_moral = rowSums(.[col_subj_names] == 3),
N_compt = rowSums(.[col_subj_names] == 4),
N_soccm = rowSums(.[col_subj_names] == 5),
N_apprn = rowSums(.[col_subj_names] == 6),
N_soccl = rowSums(.[col_subj_names] == 7),
N_uncln = rowSums(.[col_subj_names] == 8)) %>%
select(words_id, N_moral:N_uncln) %>%
arrange(match(words_id, row_word_id)) %>%
dplyr::mutate(N_raters = rowSums( .[2:7] )) %>%
dplyr::mutate(Moral_freq = round(N_moral/N_raters,2),
Compt_freq = round(N_compt/N_raters,2),
SocCm_freq = round(N_soccm/N_raters,2),
Apprn_freq = round(N_apprn/N_raters,2),
SocCl_freq = round(N_soccl/N_raters,2),
Uncln_freq = round(N_uncln/N_raters,2))
View(df_rating_71_domain)
names(df_rating_71_domain)
df_rating_71_domain_frq <- df_rating_71_domain %>%
dplyr::mutate(N_moral = rowSums(.[col_subj_names] == 3),
N_compt = rowSums(.[col_subj_names] == 4),
N_soccm = rowSums(.[col_subj_names] == 5),
N_apprn = rowSums(.[col_subj_names] == 6),
N_soccl = rowSums(.[col_subj_names] == 7),
N_uncln = rowSums(.[col_subj_names] == 8)) %>%
dplyr::select(words_id, N_moral:N_uncln) %>%
arrange(match(words_id, row_word_id)) %>%
dplyr::mutate(N_raters = rowSums( .[2:7] )) %>%
dplyr::mutate(Moral_freq = round(N_moral/N_raters,2),
Compt_freq = round(N_compt/N_raters,2),
SocCm_freq = round(N_soccm/N_raters,2),
Apprn_freq = round(N_apprn/N_raters,2),
SocCl_freq = round(N_soccl/N_raters,2),
Uncln_freq = round(N_uncln/N_raters,2))
df_rating_71_domain_frq_final <- df_rating_71_domain_frq %>%
dplyr::left_join(., wordList_71, by = 'words_id')
# get the valence rating
# re-code the all the results to the same scale
row_word_id_v <- df_rating_71_v %>%
dplyr::select(contains('Q4_') | contains('Q5_')) %>%
colnames(.)
df_rating_71_valence_1 <- df_rating_71_v %>%
dplyr::select(contains('Q4_')) %>%
dplyr::mutate_at(colnames(.)
,function(x, na.rm = FALSE) (x -6))
df_rating_71_valence <- df_rating_71_v %>%
dplyr::select(contains('Q5_')) %>%
dplyr::mutate_at(colnames(.)
,function(x, na.rm = FALSE) (x -11)) %>%
dplyr::bind_cols(df_rating_71_valence_1, .)
df_rating_71_valence <- df_rating_71_valence %>%
dplyr::mutate(subj = col_subj_names) %>%
dplyr::select(subj,everything()) %>%
tidyr::gather(key = var_name, value = value, 2:ncol(.)) %>%
spread_(colnames(.)[1], "value") %>%
dplyr::rename(words_id = var_name) %>%
dplyr::select(words_id, all_of(col_subj_names))
df_rating_71_valence_score <- df_rating_71_valence %>%
dplyr::mutate(mean_Valence = rowMeans(.[col_subj_names] ),
sd_Valence = matrixStats::rowSds(as.matrix(.[col_subj_names]))) %>%
dplyr::select(words_id, mean_Valence,sd_Valence) %>%
dplyr::arrange(match(words_id, row_word_id_v)) %>%
dplyr::left_join(., wordList_71, by = 'words_id')
df_rating_71_final <- df_rating_71_domain_frq_final %>%
dplyr::left_join(., df_rating_71_valence_score, by = c('words')) %>%
dplyr::select(-c(words_id.y, domain_w.y)) %>%
dplyr::rename(words_id = words_id.x,
domain_w = domain_w.x) %>%
#                      words_id_valence = words_id.y) %>%
dplyr::select(words_id, words, domain_w, everything())
df_rating_71_final_fn <- file("./Stage_3_71_words_rating_score.csv", encoding="UTF-8")
df_rating_71_final_fn <- file("./Stage_3_71_words_rating_score.csv", encoding="UTF-8")
write.csv(df_rating_71_final, file = df_rating_71_final_fn, row.names = F)
df_rating_71_final_fn <- file("./Stage_3_71_words_rating_score.xlsx", encoding="UTF-8")
xlsx::write.xlsx(df_rating_71_final, "./Stage_3_71_words_rating_score.xlsx", sheetName = "Sheet1",
col.names = TRUE, row.names = TRUE, append = FALSE)
## plot these
## problem: need to add one more column: domain of words, different from domain of rating.
tmp <- df_rating_71_final %>%
dplyr::select(words_id, words, domain_w, mean_Valence, N_moral:N_uncln) %>%
dplyr::rename(Morality = N_moral, Sociability = N_soccm, Competence = N_compt,
Appearance = N_apprn, Wealth = N_soccl, Unclear = N_uncln) %>%
tidyr::pivot_longer(-c(words_id, words, domain_w, mean_Valence),
names_to = 'domain_r', values_to = 'freq') %>%
#dplyr::mutate(domain_w = factor(domain_w, levels = c("Morality", "Competence", "Sociability",
#                                                     "Appearance", "Wealth"))) %>%
dplyr::mutate(domain_r = factor(domain_r, levels = c("Morality", "Competence", "Sociability",
"Appearance", "Wealth", "Unclear")),
#words_id = factor(words_id, levels = row_word_id),
#words = factor(words, levels = .[1:71, "words"]$words),
domain_w = factor(domain_w, levels = c("Morality", "Competence", "Sociability",
"Appearance", "Wealth"))) %>%
#dplyr::group_by(domain_w) %>%
dplyr::arrange(domain_w, domain_r,desc(freq)) # %>%
new_word_ord <- tmp %>%
dplyr::mutate(domain_w = as.character(domain_w),
domain_r = as.character(domain_r)) %>%
dplyr::filter(domain_w == domain_r)
#write.csv(new_word_ord, file = "b.csv", row.names = F)
new_word_ord<-read.csv("b.csv")
new_word_ord$domain_r <- factor(
new_word_ord$domain_r,
levels = c("Appearance","Wealth","Sociability","Competence",
"Morality", "Unclear"),
labels = c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Ambiguous")
)
new_word_ord<-new_word_ord %>% dplyr::arrange(
domain_r, -freq
) %>% dplyr::mutate(
en_words = paste(words_en, words,seq = "")
)
#tmp <- tmp %>%
#dplyr::mutate(words = factor(words, levels = new_word_ord$words))
tmp <- tmp %>%
dplyr::mutate(domain_r = factor(
domain_r,
levels = c("Appearance","Wealth","Sociability","Competence",
"Morality", "Unclear"),
labels = c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Ambiguous")
)) %>%
dplyr::arrange(
domain_r, -freq
)
tmp$words <- factor(tmp$words, levels = new_word_ord$words, labels = new_word_ord$en_words)
#pdf('plot_freq_71_word.pdf', width = 15, height = 8)
tmp %>% ggplot2::ggplot(., aes(x=words, y=freq, fill=domain_r)) +
#geom_histogram(stat="identity", position = 'fill') %>%
geom_histogram(stat = "identity",
position = "fill") +
scale_fill_manual(values=rev(c("#ffb3e5","#6666ff", "#ff66ff", "#ffff33","#1ab1ff","#ff4d4d")))+
labs(x="Words",y="Percentage",fill="Dimension") +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 45),
axis.text.y=element_text(angle = 0, colour = "black", size = 65),
axis.title.x = element_text(size=80),
axis.title.y = element_text(size=80),
legend.title = element_text(size=80),legend.text = element_text(size=65),legend.key.width=unit(2,'cm'))
setwd('/Users/lilulu/Desktop/SEVproject/2_Study2_SEV database/2_3_Analysis/2_3_1_data_bids[standardized_data]/2_3_1_2_data')
#words_val_res:containing valence information and confidence intervals for each dimension's words
words_val_res <- read.csv("./words_val_res.csv",header = T,encoding="UTF-8")
words_val_res$dimension <- as.factor(words_val_res$dimension)
words_val_res$valence <- as.factor(words_val_res$valence)
valence_colors <- c("Positive" = "#ff6666",
"Neutral" = "#ffaf33",
"Negative" = "#6666ff")
for_list <- c(
"appearance", "socioEconomicStatus",
"socialAbility", "competence", "morality"
)
for_x_title <- c(
"Appearance", "Socioeconomic status",
"Sociability", "Competence", "Morality"
)
get_color <- function(i) {
if (i == 1) {
"black"
} else {
"white"
}
}
plot_data <- list()
for (i in seq_along(for_list)) {
data_subset <- words_val_res %>%
filter(dimension == for_list[i]) %>%
mutate(dimension = for_x_title[i])
plot_data[[i]] <- data_subset
}
combined_data <- do.call(rbind, plot_data)
violin_plot <- ggplot(combined_data, aes(x = dimension, y = (lower + upper) / 2, fill = valence, color = valence)) +
geom_point(data = combined_data %>% filter(valence == "Neutral"), size = 4) +
geom_half_violin(data = combined_data %>% filter(valence != "Neutral"), side = "r", position = position_nudge(x = 0, y = 0)) +
geom_half_point(data = combined_data %>% filter(valence != "Neutral"), side = "l", position = position_nudge(x = 0, y = 0), size = 4, alpha = 1) +
geom_hline(yintercept = 5, linetype = "dashed", color = "black", size = 1) +
scale_fill_manual(values = valence_colors) +
scale_color_manual(values = valence_colors) +
labs(y = "Average Rating", fill = "Valence") +
scale_y_continuous(limits = c(1, 9)) +
scale_x_discrete(limits = for_x_title) +  # 确保x轴显示所有维度
theme_bw() +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black",size = 1),
axis.ticks = element_line(colour = "black", size = 1),
axis.ticks.length = unit(0.25, "cm"),
axis.text.x = element_text(colour = "black", size = 65),
axis.title.x = element_blank(),
axis.title.y = element_text(colour = "black", size = 80),
axis.text.y = element_text(colour = "black", size = 65),
legend.title = element_text(size = 80),
legend.text = element_text(size = 65),
legend.position = "right") +
guides(fill = guide_legend(title = "Valence"), color = guide_legend(title = "Valence"))
plot(violin_plot)
ggplot(data = tmp3Mor, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff", "#FF00FF", "#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension"
) +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 100),
axis.text.y=element_text(angle = 0, colour = "black", size = 100),axis.title.x = element_text(size=130,margin = margin(t=-500)),
axis.title.y = element_text(size=130),
legend.position = "none",
strip.text = element_text(size = 100))+
facet_wrap(~ max_dimension, nrow = 5, scale = "free")
ggplot(data = tmp3Mor, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff", "#FF00FF", "#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension"
) +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 100),
axis.text.y=element_text(angle = 0, colour = "black", size = 100),axis.title.x = element_text(size=130,margin = margin(t=-500)),
axis.title.y = element_text(size=130),
legend.position = "none",
strip.text = element_text(size = 100))+
facet_wrap(~ max_dimension, nrow = 5, scale = "free")
ggplot(data = tmp3, aes(x = word, y = effective_degree, fill = belong_to)) +
geom_bar(position = "stack", stat = "identity", width = 0.6) +
scale_fill_manual(
values=rev(c("#FF00AA","#00FF00","#3333ff",
"#FF00FF","#FFFF00","#0099e6","#ff4d4d")),
labels=c("Appearance","Socioeconomic status","Sociability","Competence","Morality","Non-five","Ambiguous"),
name = "Dimension") +
labs(x="Words",y="Percentage") +
theme(
axis.text.x=element_text(angle = 90, colour = "black", hjust=1,size = 30),
axis.text.y=element_text(angle = 0, colour = "black", size = 80),axis.title.x = element_text(size=120),
axis.title.y = element_text(size=120),
legend.position = "none",
strip.text = element_text(size = 100)) + facet_wrap(~ max_dimension, nrow = 5, scale = "free")
